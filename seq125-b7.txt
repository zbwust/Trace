//b取7时的序列
//用不可约多项式生成扩域
P := 5;
M := 3;
F := 2;
E := (P-1)/F;
N := 1;

//计算N=P^M
for i in [1..M] do
    N *:= P;
end for;

N1 :=[Integers()|];
tempN1 := P;
for i in [1..M] do
    Append(~N1,tempN1);
    tempN1 *:= P;
end for;

D := [[[Integers()|]]];
DD:=[[[Integers()|]]];

i := 1;
repeat
    i +:= 1;
    j := 0;
    temp := 1;
    repeat
        j +:= 1;
        temp := (temp*i) mod P^2;
    until temp eq 1;
until j eq P*(P-1);
g := i;
print "g=", g;


//计算分圆类
for k in [1..M-1] do
    Append(~D,[[]]);
    Append(~DD,[[]]);
end for;

P1:=1;
for k in [M..1 by -1] do
    gp := 1;
    for i in [1..(F*N1[k]) div P] do
        gp := (gp*g) mod N1[k];
    end for;

    D[k][1][1] := 1;
    DD[k][1][1]:=P1*D[k][1][1];
    for i in [2..(P-1) div F] do
        D[k][1][i] := (D[k][1][i-1]*gp) mod N1[k];
        DD[k][1][i]:=P1*D[k][1][i];
    end for;

    for j in [1..((F*N1[k]) div P)-1] do
        Append(~D[k],[]);
        Append(~DD[k],[]);
        D[k][j+1][1]:=g*D[k][j][1] mod N1[k];
        DD[k][j+1][1]:=P1*D[k][j+1][1];
        for i in [2..(P-1) div F] do
            D[k][j+1][i] := (g*D[k][j][i]) mod N1[k];
            DD[k][j+1][i]:=P1*D[k][j+1][i];
         end for;
     end for;
   P1*:=P;
end for;

//输出分圆类到文件date3.txt
File:=Open("date3.txt","w");
fprintf File,"%o^%o，本原元：%o\n", P,M,g;

for k in [M..1 by -1] do
    fprintf File,"M=%o时的分圆类:\n",k;
 
    fprintf File,"    D[0]=\{%o",DD[k][1][1];
    for i in [2..(P-1) div F] do
        fprintf File, ",%o",DD[k][1][i];
    end for;
    fprintf File, "\}\n";
    for j in [1..((F*N1[k]) div P)-1] do
         fprintf File,"    D[%o]=\{%o",j,DD[k][j+1][1];
        for i in [2..(P-1) div F] do
            fprintf File,",%o",DD[k][j+1][i];
         end for;
         fprintf File,"\}\n";
    end for;
end for;
delete File;

//输出2模N=P^M的乘法阶
F2:=FiniteField(2);
PP<x>:=PolynomialRing(F2);
tm:=Order(2,N);
print "tm=", tm;  
C<x> :=IrreduciblePolynomial(F2,tm);
F<w>:=ext<F2|C>; //定义F2的tm次扩域, w是不可约多项式C(x)的根
print "C=", C;
h:=PrimitiveElement(F); //h是本原元
//print "h=", h;
//w^100+w^6+w^5+w^2+1; 用于验证w是C(x)的根
//w^(2^100-1);
//h^(2^100-1);

lm:=(2^tm-1) div N;
//print "lm=", lm;
v:=h^lm;
print "v=", v; //125次本原单位根
//v^125;
//v^25;

//以下代码根据m的值来改写
//m=3
SF1<u1>:=sub<F | v^P>;
SF2<u2>:=sub<F | v^(P^2)>;
//SF3<u3>:=sub<F | v^(P^3)>;
//H:=u1^(P^2); //u1是25次单位根，定义F25
//G:=u2^P;
//print "G=",G, "H=",H;
//u3;

AA:=[[F|]];
for k in [1..M-1] do
    Append(~AA,[]);
end for;

for k in [1..M] do
    i:=0;
    for D2 in DD[k] do
        i:=i+1;
        AA[k][i]:=0;
        for j in D2 do
            AA[k][i]:=AA[k][i]+v^j;
        end for;
    end for;
end for;

//可以调整start         
BB:=[F|];

//如果start=0，等于从数组中的位置1开始
start:=0;
for k in [1..M] do
    BB[k]:=0;
    Number:=#DD[k];
    for i:=0 to (Number div 2) - 1 do
       BB[k]:=BB[k]+AA[k][((start+i) mod Number) + 1];
    end for;
end for;
        
a0:=v^25+v^100;
print "a0=", a0;
a1 :=v^50+v^75;
//print "a1=", a1;
//a0+a1;用于验证

b0:=v^20+v^105+v^40+v^85+v^80+v^45+v^35+v^90+v^70+v^55;
//b0;
b1:=v^15+v^110+v^30+v^95+v^60+v^65+v^5+v^120+v^10+v^115;
//b1;
//b0+b1;用于验证

c0:=v^1+v^124+v^2+v^123+v^4+v^121+v^8+v^117+v^16+v^109+v^32+v^93+v^64+v^61+v^46+v^79+v^92+v^33+v^59+v^66+v^118+v^7+v^111+v^14+v^97+v^28+v^69+v^56+v^13+v^112+v^26+v^99
       +v^52+v^73+v^104+v^21+v^83+v^42+v^41+v^84+v^82+v^43+v^39+v^86+v^78+v^47+v^31+v^94+v^62+v^63;
//c0;
c1:=v^57+v^68+v^11+v^114+v^22+v^103+v^81+v^44+v^37+v^88+v^74+v^51+v^23+v^102
       +v^3+v^122+v^6+v^119+v^12+v^113+v^24+v^101+v^48+v^77+v^96+v^29+v^67+v^58+v^9+v^116+v^18+v^107
       +v^36+v^89+v^72+v^53+v^19+v^106+v^38+v^87+v^76+v^49+v^27+v^98+v^54+v^71+v^108+v^17+v^91+v^34;
//c1;
//c0+c1;用于验证

B0:=a0+b0;
print "B0=", B0;
C0:=a0+b0+c0;
print "C0=", C0;
B1:=a1+b1;
//print "B1=", B1;
C1:=a1+b1+c1;
//print "C1=", C1;

s:=[Integers()|];
  for i in [0..124] do
     elem:=1+Trace(a0*(u2^i))+Trace(B0*(u1^i))+Trace(C0*(v^i));
     Append(~s,elem);
  end for;
s;

